@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridViewPartial_ProductoDetalle";
        settings.CallbackRouteValues = new { Controller = "Producto", Action = "GridViewPartial_ProductoDetalle", Area = "General" };
        settings.KeyFieldName = "Secuencia";

        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Producto", Action = "EditingAddNew", Area = "General" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Producto", Action = "EditingUpdate", Area = "General" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Producto", Action = "EditingDelete", Area = "General" };

        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;

        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsContextMenu.RowMenuItemVisibility.NewRow = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Funcion para inicializar fila al presionar nuevo
        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["Descripcion"] = "";
            e.NewValues["Minimo"] = "0";
            e.NewValues["Maximo"] = "0";
            e.NewValues["Ponderacion"] = "0";
            e.NewValues["PorcentajeMinimo"] = "0";
            e.NewValues["EsObligatorio"] = false;
        };
        settings.Columns.Add(column =>
        {
            column.FieldName = "Descripcion";
            column.Caption = "Característica";
            column.Width = Unit.Percentage(20);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Minimo";
            column.Caption = "Mínimo";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 999999999;
            });
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Maximo";
            column.Caption = "Máximo";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 999999999;
            });
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Ponderacion";
            column.Caption = "Ponderación";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 999999999;
            });
            column.Width = Unit.Percentage(12);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "PorcentajeMinimo";
            column.Caption = "Porcentaje Mínimo";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.EditorProperties().SpinEdit(sp =>
            {
                sp.MinValue = 0;
                sp.MaxValue = 100;
            });
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ValorOptimo";
            column.Caption = "Valor Optimo";
            column.Width = Unit.Percentage(10);
            column.EditorProperties().ComboBox(p =>
            {
                p.Columns.Add("Value", "Descripción").Width = Unit.Percentage(100);
                p.TextField = "Value";
                p.ValueField = "Key";
                p.ValueType = typeof(string);
                p.DataSource = ViewBag.lst_ValorOptimo;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "EscogerPrecioPor";
            column.Caption = "Prioridad para escoger precio";
            column.Width = Unit.Percentage(10);
            column.EditorProperties().ComboBox(p =>
            {
                p.Columns.Add("Value", "Descripción").Width = Unit.Percentage(100);
                p.TextField = "Value";
                p.ValueField = "Key";
                p.ValueType = typeof(string);
                p.DataSource = ViewBag.lst_EscogerPrecioPor;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "EsObligatorio";
            column.Caption = "Obligatorio";
            column.Width = Unit.Percentage(8);
            column.EditorProperties().CheckBox(sp =>
            {

            });
        });
        settings.ClientSideEvents.BeginCallback = "function(s,e) { e.customArgs['TransaccionFixed'] = $('#IdTransaccionSession').val();}";
    });
}
@grid.Bind(Model).GetHtml()